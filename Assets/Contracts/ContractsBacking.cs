//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  Contracts.sol
//   Output filename: ContractsBacking.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if UNITY_EDITOR || !ENABLE_MONO
using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace Contracts
{
	public class ContractsBacking : Contract, Contracts
	{
		public string Address
		{
			get => base.Address;
		}
		public ContractsBacking(IProvider provider, EvmAddress address, Type interfaceType) : base(provider, address, interfaceType)
		{
		}
		public Task<Contracts> DeployNew()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Contracts>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "BLAST", View = true)]
		public Task<EvmAddress> BLAST()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "apr", View = true)]
		public Task<BigInteger> Apr()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "apy", View = true)]
		public Task<BigInteger> Apy()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "balances", View = true)]
		public Task<BigInteger> Balances([EvmParameterInfo(Type = "address", Name = "")] EvmAddress ad1, [EvmParameterInfo(Type = "address", Name = "")] EvmAddress ad2, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] { ad1, ad2, options });
		}
		
		[EvmMethodInfo(Name = "claimAllGas", View = false)]
		public Task<Transaction> ClaimAllGas(EvmAddress recipient, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { recipient, options });
		}
		
		[EvmMethodInfo(Name = "claimAllYield", View = false)]
		public Task<Transaction> ClaimAllYield(EvmAddress recipient, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { recipient, options });
		}
		
		[EvmMethodInfo(Name = "claimYield", View = false)]
		public Task<Transaction> ClaimYield(EvmAddress recipient, BigInteger amount, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { recipient, amount, options });
		}
		
		[EvmMethodInfo(Name = "deposit", View = false)]
		public Task<Transaction> Deposit()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "getClaimableYield", View = true)]
		public Task<BigInteger> GetClaimableYield()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "getYieldConfiguration", View = true)]
		[return: EvmParameterInfo(Type = "uint8")]
		public Task<UInt16> GetYieldConfiguration()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<UInt16>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "globalLendingLimit", View = true)]
		public Task<BigInteger> GlobalLendingLimit()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "loans", View = true)]
		public Task<Tuple<EvmAddress, EvmAddress, BigInteger, BigInteger, BigInteger>> Loans([EvmParameterInfo(Type = "address", Name = "")] EvmAddress ad1, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Tuple<EvmAddress, EvmAddress, BigInteger, BigInteger, BigInteger>>) InvokeMethod(method, new object[] { ad1, options });
		}
		
		[EvmMethodInfo(Name = "owner", View = true)]
		public Task<EvmAddress> Owner()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "paused", View = true)]
		public Task<Boolean> Paused()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "renounceOwnership", View = false)]
		public Task<Transaction> RenounceOwnership()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "t_owner", View = true)]
		public Task<EvmAddress> T_owner()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "totalBorrowedAmount", View = true)]
		public Task<BigInteger> TotalBorrowedAmount()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "totalLentAmount", View = true)]
		public Task<BigInteger> TotalLentAmount()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "transferOwnership", View = false)]
		public Task<Transaction> TransferOwnership(EvmAddress newOwner, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { newOwner, options });
		}
		
		[EvmMethodInfo(Name = "withdraw", View = false)]
		public Task<Transaction> Withdraw(BigInteger _amount, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { _amount, options });
		}
		
	}
}
#endif
