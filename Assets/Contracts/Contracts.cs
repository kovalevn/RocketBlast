//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  Contracts.sol
//   Output filename: Contracts.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace Contracts
{
	#if UNITY_EDITOR || !ENABLE_MONO
	[BackedType(typeof(ContractsBacking))]
	#endif
	public interface Contracts : IContract
	{
		[EvmConstructorMethod]
		Task<Contracts> DeployNew();
		
		[EvmMethodInfo(Name = "BLAST", View = true)]
		Task<EvmAddress> BLAST();
		
		[EvmMethodInfo(Name = "apr", View = true)]
		Task<BigInteger> Apr();
		
		[EvmMethodInfo(Name = "apy", View = true)]
		Task<BigInteger> Apy();
		
		[EvmMethodInfo(Name = "balances", View = true)]
		Task<BigInteger> Balances([EvmParameterInfo(Type = "address", Name = "")] EvmAddress ad1, [EvmParameterInfo(Type = "address", Name = "")] EvmAddress ad2, CallOptions options = default);
		
		[EvmMethodInfo(Name = "claimAllGas", View = false)]
		Task<Transaction> ClaimAllGas(EvmAddress recipient, CallOptions options = default);
		
		[EvmMethodInfo(Name = "claimAllYield", View = false)]
		Task<Transaction> ClaimAllYield(EvmAddress recipient, CallOptions options = default);
		
		[EvmMethodInfo(Name = "claimYield", View = false)]
		Task<Transaction> ClaimYield(EvmAddress recipient, BigInteger amount, CallOptions options = default);
		
		[EvmMethodInfo(Name = "deposit", View = false)]
		Task<Transaction> Deposit();
		
		[EvmMethodInfo(Name = "getClaimableYield", View = true)]
		Task<BigInteger> GetClaimableYield();
		
		[EvmMethodInfo(Name = "getYieldConfiguration", View = true)]
		[return: EvmParameterInfo(Type = "uint8")]
		Task<UInt16> GetYieldConfiguration();
		
		[EvmMethodInfo(Name = "globalLendingLimit", View = true)]
		Task<BigInteger> GlobalLendingLimit();
		
		[EvmMethodInfo(Name = "loans", View = true)]
		Task<Tuple<EvmAddress, EvmAddress, BigInteger, BigInteger, BigInteger>> Loans([EvmParameterInfo(Type = "address", Name = "")] EvmAddress ad1, CallOptions options = default);
		
		[EvmMethodInfo(Name = "owner", View = true)]
		Task<EvmAddress> Owner();
		
		[EvmMethodInfo(Name = "paused", View = true)]
		Task<Boolean> Paused();
		
		[EvmMethodInfo(Name = "renounceOwnership", View = false)]
		Task<Transaction> RenounceOwnership();
		
		[EvmMethodInfo(Name = "t_owner", View = true)]
		Task<EvmAddress> T_owner();
		
		[EvmMethodInfo(Name = "totalBorrowedAmount", View = true)]
		Task<BigInteger> TotalBorrowedAmount();
		
		[EvmMethodInfo(Name = "totalLentAmount", View = true)]
		Task<BigInteger> TotalLentAmount();
		
		[EvmMethodInfo(Name = "transferOwnership", View = false)]
		Task<Transaction> TransferOwnership(EvmAddress newOwner, CallOptions options = default);
		
		[EvmMethodInfo(Name = "withdraw", View = false)]
		Task<Transaction> Withdraw(BigInteger _amount, CallOptions options = default);
		
	}
}
