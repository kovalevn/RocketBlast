//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  Contract3.sol
//   Output filename: Contract3Backing.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if UNITY_EDITOR || !ENABLE_MONO
using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace Contract3
{
	public class Contract3Backing : Contract, Contract3
	{
		public string Address
		{
			get => base.Address;
		}
		public Contract3Backing(IProvider provider, EvmAddress address, Type interfaceType) : base(provider, address, interfaceType)
		{
		}
		public Task<Contract3> DeployNew()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Contract3>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "allTickets", View = true)]
		public Task<BigInteger> AllTickets()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "blast", View = true)]
		public Task<EvmAddress> Blast()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "deposit", View = false)]
		public Task<Transaction> Deposit()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "getAvailableYield", View = true)]
		public Task<BigInteger> GetAvailableYield()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "getBalance", View = true)]
		public Task<BigInteger> GetBalance()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "lastLotteryTimestamp", View = true)]
		public Task<BigInteger> LastLotteryTimestamp()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "lottery", View = false)]
		public Task<Transaction> Lottery()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "lotteryInterval", View = true)]
		public Task<BigInteger> LotteryInterval()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "playerTickets", View = true)]
		public Task<BigInteger> PlayerTickets([EvmParameterInfo(Type = "address", Name = "")] EvmAddress address, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] { address, options });
		}
		
		[EvmMethodInfo(Name = "withdraw", View = false)]
		public Task<Transaction> Withdraw(BigInteger amount, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { amount, options });
		}
		
		[EvmMethodInfo(Name = "withdrawYield", View = false)]
		public Task<Transaction> WithdrawYield()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
	}
}
#endif
